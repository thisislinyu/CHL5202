{
  "hash": "350491a315032b439ead6f4a1673da45",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Logistic Regression 3\"\nauthor: \"Lin Yu\"\ndate: \"2025-02-14\"\nformat: \n  html: \n    toc: true\n    embed-resources: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(here)\n```\n:::\n\n\n\n\n\n\n## Recap of Tutorial 4\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rms)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Hmisc\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'Hmisc'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:dplyr':\n\n    src, summarize\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    format.pval, units\n```\n\n\n:::\n\n```{.r .cell-code}\nload(here(\"data\",\"tutdata.RData\"))\ndd <- datadist(tutdata)\noptions(datadist = \"dd\")\nfit1 <- lrm(y ~ blood.pressure + sex + age + rcs(cholesterol,4), data = tutdata)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfit2 <- lrm(y ~ blood.pressure + sex * (age + rcs(cholesterol,4)), data = tutdata,x=TRUE, y= TRUE)\nanova(fit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                Wald Statistics          Response: y \n\n Factor                                           Chi-Square d.f. P     \n blood.pressure                                    0.26       1   0.6105\n sex  (Factor+Higher Order Factors)               38.71       5   <.0001\n  All Interactions                                26.13       4   <.0001\n age  (Factor+Higher Order Factors)               30.42       2   <.0001\n  All Interactions                                 3.86       1   0.0495\n cholesterol  (Factor+Higher Order Factors)       23.78       6   0.0006\n  All Interactions                                22.47       3   0.0001\n  Nonlinear (Factor+Higher Order Factors)          5.33       4   0.2550\n sex * age  (Factor+Higher Order Factors)          3.86       1   0.0495\n sex * cholesterol  (Factor+Higher Order Factors) 22.47       3   0.0001\n  Nonlinear                                        4.79       2   0.0911\n  Nonlinear Interaction : f(A,B) vs. AB            4.79       2   0.0911\n TOTAL NONLINEAR                                   5.33       4   0.2550\n TOTAL INTERACTION                                26.13       4   <.0001\n TOTAL NONLINEAR + INTERACTION                    26.81       6   0.0002\n TOTAL                                            62.26      10   <.0001\n```\n\n\n:::\n\n```{.r .cell-code}\nanova(fit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                Wald Statistics          Response: y \n\n Factor                                           Chi-Square d.f. P     \n blood.pressure                                    0.26       1   0.6105\n sex  (Factor+Higher Order Factors)               38.71       5   <.0001\n  All Interactions                                26.13       4   <.0001\n age  (Factor+Higher Order Factors)               30.42       2   <.0001\n  All Interactions                                 3.86       1   0.0495\n cholesterol  (Factor+Higher Order Factors)       23.78       6   0.0006\n  All Interactions                                22.47       3   0.0001\n  Nonlinear (Factor+Higher Order Factors)          5.33       4   0.2550\n sex * age  (Factor+Higher Order Factors)          3.86       1   0.0495\n sex * cholesterol  (Factor+Higher Order Factors) 22.47       3   0.0001\n  Nonlinear                                        4.79       2   0.0911\n  Nonlinear Interaction : f(A,B) vs. AB            4.79       2   0.0911\n TOTAL NONLINEAR                                   5.33       4   0.2550\n TOTAL INTERACTION                                26.13       4   <.0001\n TOTAL NONLINEAR + INTERACTION                    26.81       6   0.0002\n TOTAL                                            62.26      10   <.0001\n```\n\n\n:::\n:::\n\n\n\n\n\n\ncompare two models using LRT. To use LRT, one model needs to be nested within a larger model.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrtest(fit1,fit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nModel 1: y ~ blood.pressure + sex + age + rcs(cholesterol, 4)\nModel 2: y ~ blood.pressure + sex * (age + rcs(cholesterol, 4))\n\n  L.R. Chisq         d.f.            P \n2.831616e+01 4.000000e+00 1.076137e-05 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n##  Tutorial 5\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1017)\nvalidate(fit2, B = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          index.orig training   test optimism index.corrected   n\nDxy           0.2832   0.3058 0.2682   0.0376          0.2456 100\nR2            0.0896   0.1059 0.0795   0.0263          0.0632 100\nIntercept     0.0000   0.0000 0.0389  -0.0389          0.0389 100\nSlope         1.0000   1.0000 0.8601   0.1399          0.8601 100\nEmax          0.0000   0.0000 0.0401   0.0401          0.0401 100\nD             0.0684   0.0817 0.0604   0.0213          0.0470 100\nU            -0.0020  -0.0020 0.0019  -0.0039          0.0019 100\nQ             0.0704   0.0837 0.0585   0.0252          0.0452 100\nB             0.2316   0.2288 0.2342  -0.0054          0.2369 100\ng             0.6230   0.6828 0.5790   0.1038          0.5192 100\ngp            0.1457   0.1566 0.1357   0.0209          0.1248 100\n```\n\n\n:::\n:::\n\n\n\n\n\n\n- index.orig: The performance metric computed on the full dataset.        \n- training: The metric computed on the training dataset (bootstrap sample).   - test: The metric computed on the test dataset (out-of-bootstrap sample).    \n- optimism: The difference between training and test performance, estimating overfitting.            \n- index.corrected: The optimism-adjusted estimate of model performance.\nn: Number of bootstrap iterations (100)     \n- g (Gini coefficient): Related to AUC (Area Under the Curve)\n- Emax (Maximum Calibration Error): Largest difference between predicted and observed probabilities.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndff <- resid(fit2, \"dffits\")\nplot(dff)\n```\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nshow.influence(which.influence(fit2), data.frame(tutdata, dffits = dff), report = c(\"dffits\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Count     sex cholesterol     dffits\n143     2  female   *274.0808  1.6108318\n173     4 *female   *138.5056 -1.1265158\n181     2 *male      146.4978  0.8026558\n408     2 *male      148.1649  0.6813596\n411     1  female    146.3522  0.5594519\n834     2  female   *146.6413 -0.4908278\n840     2  female   *147.0025 -0.5604495\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe dffits statistic measures the influence of each observation on the fitted model. It represents the change in the predicted value for a data point if that data point were removed from the model.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Partial residuals are the residuals from the model, adjusted for the effect of the predictors that are not of primary interest\nresid(fit2, \"partial\", pl = \"loess\")\n```\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-7-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-7-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-7-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-7-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-7-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-7-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-7-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-7-10.png){width=672}\n:::\n:::\n\n\n\n\n\n\n- Non-linearity: If the loess curve shows a clear non-linear relationship between a predictor and the residuals, you might need to consider transforming that predictor (e.g., using log or polynomial terms) to improve the model fit.        \n- Outliers or influential points: Any points that deviate significantly from the smoothed curve might be influential or outliers, warranting further investigation.       \n\n## Boostrapping\n\nresampling technique used to estimate the sampling distribution of a statistic by repeatedly sampling with replacement from the original dataset, useful when theoretical distributions are unknown or difficult to derive.\n\nfor example, say we want to calculate the confidence interval for sample mean, we need to know the distribution of the sample mean:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1017)\n\n## pop data\nn <- 1000\ndata <- rnorm(n, mean=5, sd=10) \n\nanalytical_lower <- mean(data) - 1.96*sd(data)/sqrt(n)\nanalytical_upper <- mean(data) + 1.96*sd(data)/sqrt(n)\n\n\nnboot <- 1000\n\n## sample(data, size=n, replace=TRUE) bootstrap sampling\n## mean(sample(data, size=n, replace=TRUE)) calculate sample mean\nboot_means <- replicate(nboot, mean(sample(data, size=n, replace=TRUE)))\n\nboot_means %>% density() %>% plot()\n```\n\n::: {.cell-output-display}\n![](Tut5_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# percentile \nboot_lower_bound <- quantile(boot_means, 0.025)\nboot_upper_bound <- quantile(boot_means, 0.975)\n\n\ncat(\"Original Sample Mean:\", mean(data), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOriginal Sample Mean: 4.87006 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"95% CI for Mean (analytical solution):\", analytical_lower, analytical_upper, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n95% CI for Mean (analytical solution): 4.247337 5.492783 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"95% Bootstrapped (nboot=1000) CI for Mean:\", boot_lower_bound, boot_upper_bound, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n95% Bootstrapped (nboot=1000) CI for Mean: 4.220525 5.464462 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nwhat would happen if we increase the number of bootstrap?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnboot <- 10000\n\n## sample(data, size=n, replace=TRUE) bootstrap sampling\n## mean(sample(data, size=n, replace=TRUE)) calculate sample mean\nboot_means2 <- replicate(nboot, mean(sample(data, size=n, replace=TRUE)))\n\n# percentile \nboot_lower_bound <- quantile(boot_means2, 0.025)\nboot_upper_bound <- quantile(boot_means2, 0.975)\ncat(\"95% CI for Mean (analytical solution):\", analytical_lower, analytical_upper, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n95% CI for Mean (analytical solution): 4.247337 5.492783 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"95% Bootstrapped(boot=10000) CI for Mean:\", boot_lower_bound, boot_upper_bound, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n95% Bootstrapped(boot=10000) CI for Mean: 4.242179 5.499558 \n```\n\n\n:::\n:::\n",
    "supporting": [
      "Tut5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}